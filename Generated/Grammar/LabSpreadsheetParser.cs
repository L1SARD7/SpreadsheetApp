//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar/LabSpreadsheet.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class LabSpreadsheetParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, IDENT=13, CELL=14, NUMBER=15, WS=16;
	public const int
		RULE_compileUnit = 0, RULE_expr = 1, RULE_argList = 2;
	public static readonly string[] ruleNames = {
		"compileUnit", "expr", "argList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'not'", "'^'", "'*'", "'/'", "'+'", "'-'", "'='", 
		"'<'", "'>'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "IDENT", "CELL", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LabSpreadsheet.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LabSpreadsheetParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LabSpreadsheetParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LabSpreadsheetParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompileUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LabSpreadsheetParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabSpreadsheetVisitor<TResult> typedVisitor = visitor as ILabSpreadsheetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6;
			expr(0);
			State = 7;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MulDivExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulDivExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.EnterMulDivExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.ExitMulDivExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabSpreadsheetVisitor<TResult> typedVisitor = visitor as ILabSpreadsheetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LabSpreadsheetParser.NUMBER, 0); }
		public NumberExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.EnterNumberExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.ExitNumberExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabSpreadsheetVisitor<TResult> typedVisitor = visitor as ILabSpreadsheetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CellExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CELL() { return GetToken(LabSpreadsheetParser.CELL, 0); }
		public CellExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.EnterCellExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.ExitCellExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabSpreadsheetVisitor<TResult> typedVisitor = visitor as ILabSpreadsheetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CompareExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.EnterCompareExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.ExitCompareExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabSpreadsheetVisitor<TResult> typedVisitor = visitor as ILabSpreadsheetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.EnterNotExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.ExitNotExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabSpreadsheetVisitor<TResult> typedVisitor = visitor as ILabSpreadsheetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.EnterParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.ExitParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabSpreadsheetVisitor<TResult> typedVisitor = visitor as ILabSpreadsheetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExpExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.EnterExpExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.ExitExpExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabSpreadsheetVisitor<TResult> typedVisitor = visitor as ILabSpreadsheetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.EnterAddSubExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.ExitAddSubExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabSpreadsheetVisitor<TResult> typedVisitor = visitor as ILabSpreadsheetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(LabSpreadsheetParser.IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public FuncCallExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.EnterFuncCallExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.ExitFuncCallExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabSpreadsheetVisitor<TResult> typedVisitor = visitor as ILabSpreadsheetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 10;
				Match(T__0);
				State = 11;
				expr(0);
				State = 12;
				Match(T__1);
				}
				break;
			case T__2:
				{
				_localctx = new NotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 14;
				Match(T__2);
				State = 15;
				expr(8);
				}
				break;
			case IDENT:
				{
				_localctx = new FuncCallExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 16;
				Match(IDENT);
				State = 17;
				Match(T__0);
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 57354L) != 0)) {
					{
					State = 18;
					argList();
					}
				}

				State = 21;
				Match(T__1);
				}
				break;
			case NUMBER:
				{
				_localctx = new NumberExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 22;
				Match(NUMBER);
				}
				break;
			case CELL:
				{
				_localctx = new CellExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 23;
				Match(CELL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 40;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 38;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new ExpExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 26;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 27;
						Match(T__3);
						State = 28;
						expr(8);
						}
						break;
					case 2:
						{
						_localctx = new MulDivExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 29;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 30;
						_la = TokenStream.LA(1);
						if ( !(_la==T__4 || _la==T__5) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 31;
						expr(7);
						}
						break;
					case 3:
						{
						_localctx = new AddSubExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 32;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 33;
						_la = TokenStream.LA(1);
						if ( !(_la==T__6 || _la==T__7) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 34;
						expr(6);
						}
						break;
					case 4:
						{
						_localctx = new CompareExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 35;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 36;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3584L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 37;
						expr(4);
						}
						break;
					}
					} 
				}
				State = 42;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILabSpreadsheetListener typedListener = listener as ILabSpreadsheetListener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabSpreadsheetVisitor<TResult> typedVisitor = visitor as ILabSpreadsheetVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 4, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			expr(0);
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 44;
				Match(T__11);
				State = 45;
				expr(0);
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,16,52,2,0,7,0,2,1,7,1,2,2,7,2,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,3,1,20,8,1,1,1,1,1,1,1,3,1,25,8,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,39,8,1,10,1,12,1,42,9,1,1,2,1,2,1,2,5,
		2,47,8,2,10,2,12,2,50,9,2,1,2,0,1,2,3,0,2,4,0,3,1,0,5,6,1,0,7,8,1,0,9,
		11,58,0,6,1,0,0,0,2,24,1,0,0,0,4,43,1,0,0,0,6,7,3,2,1,0,7,8,5,0,0,1,8,
		1,1,0,0,0,9,10,6,1,-1,0,10,11,5,1,0,0,11,12,3,2,1,0,12,13,5,2,0,0,13,25,
		1,0,0,0,14,15,5,3,0,0,15,25,3,2,1,8,16,17,5,13,0,0,17,19,5,1,0,0,18,20,
		3,4,2,0,19,18,1,0,0,0,19,20,1,0,0,0,20,21,1,0,0,0,21,25,5,2,0,0,22,25,
		5,15,0,0,23,25,5,14,0,0,24,9,1,0,0,0,24,14,1,0,0,0,24,16,1,0,0,0,24,22,
		1,0,0,0,24,23,1,0,0,0,25,40,1,0,0,0,26,27,10,7,0,0,27,28,5,4,0,0,28,39,
		3,2,1,8,29,30,10,6,0,0,30,31,7,0,0,0,31,39,3,2,1,7,32,33,10,5,0,0,33,34,
		7,1,0,0,34,39,3,2,1,6,35,36,10,3,0,0,36,37,7,2,0,0,37,39,3,2,1,4,38,26,
		1,0,0,0,38,29,1,0,0,0,38,32,1,0,0,0,38,35,1,0,0,0,39,42,1,0,0,0,40,38,
		1,0,0,0,40,41,1,0,0,0,41,3,1,0,0,0,42,40,1,0,0,0,43,48,3,2,1,0,44,45,5,
		12,0,0,45,47,3,2,1,0,46,44,1,0,0,0,47,50,1,0,0,0,48,46,1,0,0,0,48,49,1,
		0,0,0,49,5,1,0,0,0,50,48,1,0,0,0,5,19,24,38,40,48
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
